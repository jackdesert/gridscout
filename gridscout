#! /usr/bin/env python2.7

from   collections import namedtuple
import fileinput
import googlemaps
from   googlemaps.places import places_nearby
import mgrs
import os
import pdb
import readline
import sys
from   schema import Schema, SchemaError
import time

class M:
    log_filename  = 'log/gridscout.log'
    key_filename  = 'config/google_places.key'
    default_base  = '11T NJ 6337 2982'
    prompt        = 'gridscout > '

    ResultTuple   = namedtuple('ResultTuple', 'name address lat lng')

    result_schema = Schema({'name':     unicode,
                            'vicinity': unicode,
                            'geometry': {'location': {'lat': float, 'lng': float},
                                         unicode   : object},
                            unicode   : object})

    def __init__(self):
        with open(self.log_filename, 'w') as f:
            f.write('--- GridScout Log ---\n')

        with open(self.key_filename, 'r') as f:
            key = f.readline()

        self.map_client = googlemaps.Client(key=key)
        self.converter  = mgrs.MGRS()

    def log(self, message):
        with open(self.log_filename, 'a') as f:
            f.write(message.encode('utf-8') + '\n')

    def output(self, message):
        print message
        self.log(message)

    def result_tuple(self, result):
        try:
            self.result_schema.validate(result)
        except SchemaError:
            return

        geometry = result['geometry']
        location = geometry['location']

        r = self.ResultTuple( result['name'],
                              result['vicinity'], # Stored as "address"
                              location['lat'],
                              location['lng'] )

        return r

    def print_results(self, results):
        for result in results:
            r = self.result_tuple(result)
            if not r:
                continue

            p = self.converter.toMGRS(r.lat, r.lng)
            if p and len(p) >= 14:
                zone         = p[:-12]
                square       = p[-12:-10]
                easting      = p[-10:-6]
                northing     = p[-5:-1]
                p_formatted = zone + ' ' + square + ' ' + easting + ' ' + northing
                self.output(p_formatted + '   ' + r.name + ' - ' + r.address)

    def get_base(self):
        print '----------------------------------------'
        print 'GridScout - Copyright 2018 Jeremy Reeder'
        print '----------------------------------------'
        print ''
        print 'Set base location using MGRS coords. Default is for Boise, ID.'
        base_mgrs = raw_input('[' + self.default_base + ']> ').strip()
        if base_mgrs == '':
            base_mgrs = self.default_base
        base_mgrs = base_mgrs.upper()
        self.log('Base location: ' + base_mgrs)
        base_mgrs = base_mgrs.replace(' ', '') #remove spaces
        base_tuple = self.converter.toLatLon(base_mgrs)
        self.base = str(base_tuple[0])+','+str(base_tuple[1]) #google-compatible format

    def run(self):
        print 'Enter any query supported by Google Maps.'
        print "Ctrl-C to quit."
        while True:
            query = raw_input(self.prompt)
            if query == '':
                continue
            self.log(self.prompt + query)
            finished_with_query = False
            next_page_token = None
            while not finished_with_query:
                response = places_nearby(client=self.map_client,
                                         location=self.base,
                                         radius=25000,
                                         keyword=query,
                                         rank_by='prominence',
                                         page_token=next_page_token)
                if 'results' in response:
                    results = response['results']
                    self.print_results(results)
                    print ''
                if 'next_page_token' in response:
                    next_page_token = response['next_page_token']
                else:
                    next_page_token = None
                finished_with_query = not next_page_token
                if not finished_with_query:
                    # Google needs time to register the next-page token
                    # after each page of results.
                    time.sleep(2)

m = M()
m.get_base()
try:
    m.run()
except KeyboardInterrupt:
    sys.exit(0)
