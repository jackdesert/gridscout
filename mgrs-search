#! /usr/bin/env python2.7

import fileinput
import googlemaps
from googlemaps.places import places_nearby
import mgrs
import os
import time

class M:
    log_filename = 'log/mgrs-search.log'
    key_filename = 'config/google_places.key'
    default_base = '11T NJ 6337 2982'
    prompt       = 'mgrs-search > '

    def __init__(self):
        with open(self.log_filename, 'w') as f:
            f.write('--- MGRS Search Log ---\n')

        with open(self.key_filename, 'r') as f:
            key = f.readline()

        self.map_client = googlemaps.Client(key=key)
        self.converter  = mgrs.MGRS()

    def log(self, message):
        with open(self.log_filename, 'a') as f:
            f.write(message.encode('utf-8') + '\n')

    def output(self, message):
        print message
        self.log(message)

    def output_results(self, results):
        for result in results:
            name = None
            address = None
            latitude = None
            longitude = None
            if 'name' in result:
                name = result['name']
            if 'vicinity' in result:
                address = result['vicinity']
            if 'geometry' in result:
                geometry = result['geometry']
            if 'location' in geometry:
                location = geometry['location']
                if 'lat' in location:
                    latitude = location['lat']
                if 'lng' in location:
                    longitude = location['lng']
            if name and address and latitude and longitude:
                mgrs_point_raw = self.converter.toMGRS(latitude, longitude)
                if mgrs_point_raw and len(mgrs_point_raw) >= 14:
                    zone = mgrs_point_raw[:-12]
                    square = mgrs_point_raw[-12:-10]
                    easting = mgrs_point_raw[-10:-6]
                    northing = mgrs_point_raw[-5:-1]
                    mgrs_point = zone + ' ' + square + ' ' + easting + ' ' + northing
                    self.output(mgrs_point + '   ' + name + ' - ' + address)

    def get_base(self):
        print '..........................................'
        print 'MGRS Search - Copyright 2018 Jeremy Reeder'
        print '..........................................'
        print ''
        print 'Set base location using MGRS coords. Default is for Boise, ID.'
        base_mgrs = raw_input('[' + self.default_base + ']> ')
        if base_mgrs == '':
            base_mgrs = self.default_base
        base_mgrs = base_mgrs.upper()
        self.log('Base location: ' + base_mgrs)
        base_mgrs = base_mgrs.replace(' ', '') #remove spaces
        base_tuple = self.converter.toLatLon(base_mgrs)
        self.base = str(base_tuple[0])+','+str(base_tuple[1]) #google-compatible format

    def run(self):
        print 'Enter any query supported by Google Maps.'
        print "CTRL-C to quit."
        while True:
            query = raw_input(self.prompt)
            if query == '':
                continue
            self.log(self.prompt + query)
            finished_with_query = False
            next_page_token = None
            while not finished_with_query:
                response = places_nearby(client=self.map_client,
                                         location=self.base,
                                         radius=25000,
                                         keyword=query,
                                         rank_by='prominence',
                                         page_token=next_page_token)
                if 'results' in response:
                    results = response['results']
                    self.output_results(results)
                if 'next_page_token' in response:
                    next_page_token = response['next_page_token']
                else:
                    next_page_token = None
                finished_with_query = not next_page_token
                if not finished_with_query:
                    # Google needs time to register the next-page token
                    # after each page of results.
                    time.sleep(2)

m = M()
m.get_base()
m.run()
